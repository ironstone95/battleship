type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import battleship.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "x"}, {"E4", "m"},
                {"B9", "x"}, {"C9", "x"}, {"D9", "x"}, {"E9", "m"}, {"F3", "x"}, {"F4", "x"},
                {"F5", "x"}, {"F6", "x"}, {"F7", "x"}, {"F10", "m"}, {"G8", "m"}, {"G5", "m"},
                {"H2", "m"}, {"I2", "x"}, {"J2", "x"}, {"J6", "m"}, {"J8", "x"}, {"J9", "x"}, {"J10", "x"}
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("Your program didn't print a massage about game start");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "m"}, {"F5", "m"},
                {"B5", "x"}, {"B4", "m"}, {"C5", "x"}, {"H8", "m"}, {"F8", "x"}, {"G8", "m"},
                {"E8", "x"}, {"D8", "x"}, {"C8", "x"}, {"D8", "x"}, {"I9", "m"}, {"H1", "x"},
                {"I1", "m"}, {"H2", "x"}, {"H3", "x"}, {"E2", "m"}, {"I8", "m"}, {"J7", "x"},
                {"J8", "m"}, {"J6", "x"}, {"J5", "x"}, {"J4", "x"}, {"J3", "x"},
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        String validateShots(TestedProgram main, String[][] commands) {

            String output = null;

            for (String[] item : commands) {
                output = main.execute(item[0]);
                if (item[1].equals("x")) {
                    if (!checkShot(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected hit in " + item[0]);
                    }
                }
                if (item[1].equals("m")) {
                    if (!checkMissing(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected miss in " + item[0]);
                    }
                }
            }

            return output;
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x");
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
- name: src/battleship/Coordinate.java
  visible: true
  text: |
    package battleship;

    import java.util.Objects;

    public class Coordinate implements Comparable<Coordinate> {
        private final char letter;
        private final int number;
        public final int row;
        public final int col;

        public Coordinate(char letter, int number) {
            this.letter = letter;
            this.number = number;
            row = letter - 65;
            col = number - 1;
        }

        public char getLetter() {
            return letter;
        }

        public int getNumber() {
            return number;
        }

        @Override
        public int compareTo(Coordinate o) {
            int verticalCompare = this.row - o.row;
            if (verticalCompare != 0) {
                return verticalCompare;
            } else {
                return this.col - o.col;
            }
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Coordinate that = (Coordinate) o;
            return letter == that.letter &&
                    number == that.number &&
                    row == that.row &&
                    col == that.col;
        }

        @Override
        public int hashCode() {
            return Objects.hash(letter, number, row, col);
        }

        @Override
        public String toString() {
            return "Coordinate{" +
                    "letter=" + letter +
                    ", number=" + number +
                    ", row=" + row +
                    ", col=" + col +
                    '}';
        }
    }
  learner_created: true
- name: src/battleship/CoordinateUtil.java
  visible: true
  text: |
    package battleship;

    public class CoordinateUtil {
        public static boolean isDiagonal(Coordinate[] coordinates) {
            boolean firstCheck = coordinates[0].getLetter() == coordinates[1].getLetter() && coordinates[0].getNumber() != coordinates[1].getNumber();
            boolean secondCheck = coordinates[0].getLetter() != coordinates[1].getLetter() && coordinates[0].getNumber() == coordinates[1].getNumber();
            return !(firstCheck || secondCheck);
        }

        public static int calculateDistance(Coordinate[] coordinates) {
            int letterDistance = Math.abs(coordinates[0].getLetter() - coordinates[1].getLetter());
            int numberDistance = Math.abs(coordinates[0].getNumber() - coordinates[1].getNumber());
            return letterDistance + numberDistance + 1;
        }

        public static Coordinate createCoordinate(String input) {
            char letter = input.charAt(0);
            int number = Integer.parseInt(input.substring(1));
            return new Coordinate(letter, number);
        }

        public static Coordinate[] createCoordinate(String[] input) {
            return new Coordinate[]{createCoordinate(input[0]), createCoordinate(input[1])};
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    public class Ship {
        private final String name;
        private final int size;
        private int shotTaken = 0;
        private boolean isSunk = false;

        public Ship(String name, int size) {
            this.name = name;
            this.size = size;
        }

        public String getName() {
            return name;
        }

        public int getSize() {
            return size;
        }

        public void getDamage() {
            if (!isSunk) {
                shotTaken++;
            }
        }

        public boolean isSunk() {
            return size - shotTaken == 0;
        }
    }
  learner_created: true
- name: src/battleship/Battlefield.java
  visible: true
  text: |
    package battleship;

    import java.util.*;

    public class Battlefield {
        private List<Ship> crew;
        private final char[][] battlefield;
        private int currentIndex = 0;
        private int shotCapacity = 0;
        private int shotTaken = 0;

        private final Map<Coordinate, Ship> battlefieldMap;

        public Battlefield() {
            setCrew();
            battlefield = new char[10][10];
            for (char[] row : battlefield) {
                Arrays.fill(row, '~');
            }
            for (Ship ship : crew) {
                shotCapacity += ship.getSize();
            }

            battlefieldMap = new HashMap<>();
        }

        public int shot(String input) {
            if (!checkInput(input)) {
                return -2;
            }
            Coordinate coordinate = CoordinateUtil.createCoordinate(input);
            if (battlefieldMap.containsKey(coordinate)) {
                battlefield[coordinate.row][coordinate.col] = 'X';
                Ship ship = battlefieldMap.remove(coordinate);
                ship.getDamage();
                shotTaken++;
                if (ship.isSunk()) {
                    if (isGameOver()) {
                        return 2;
                    } else {
                        return 1;
                    }
                } else {
                    return 0;
                }
            } else {
                battlefield[coordinate.row][coordinate.col] = 'M';
                return -1;
            }
        }


        public void printBattlefield(boolean fogOfWar) {
            StringBuilder builder = new StringBuilder();
            builder.append("  ");
            for (int i = 1; i <= 10; i++) {
                builder.append(i).append(" ");
            }
            builder.append("\n");
            for (int i = 0; i < battlefield.length; i++) {
                builder.append((char) (i + 65)).append(" ");
                for (int j = 0; j < battlefield[i].length; j++) {
                    char current = battlefield[i][j];
                    if (fogOfWar && current == 'O') {
                        current = '~';
                    }
                    builder.append(current).append(" ");

                }
                builder.append("\n");
            }
            System.out.println(builder.toString());
        }

        public boolean canPlaceAnother() {
            return currentIndex < crew.size();
        }

        public void getNextShipInfo() {
            System.out.println("Enter the coordinates of " + crew.get(currentIndex).getName() + " (" + crew.get(currentIndex).getSize() + " cells):");
        }

        public boolean placeShip(String rawInput) {
            String[] input = rawInput.trim().split("\\s+");
            if (!checkInput(input)) {
                System.out.println("Wrong input! Please Enter Coordinates Correctly.");
                return false;
            }
            Coordinate[] coordinates = CoordinateUtil.createCoordinate(input);
            Arrays.sort(coordinates);
            if (CoordinateUtil.isDiagonal(coordinates)) {
                System.out.println("Error! Wrong ship location! Try again:");
                return false;
            }

            Ship ship = crew.get(currentIndex);
            if (CoordinateUtil.calculateDistance(coordinates) != ship.getSize()) {
                System.out.println("Error! Wrong length of the " + ship.getName() + " Try again:");
                return false;
            }
            if (isCloseAnother(coordinates)) {
                System.out.println("Error! You placed it too close to another one. Try again:");
                return false;
            }
            drawCoordinates(coordinates, ship);
            currentIndex++;
            return true;
        }

        public boolean isGameOver() {
            return shotTaken == shotCapacity;
        }

        private void drawCoordinates(Coordinate[] coordinates, Ship ship) {
            int rowStart = coordinates[0].row;
            int rowEnd = coordinates[1].row;

            int colStart = coordinates[0].col;
            int colEnd = coordinates[1].col;

            for (int i = rowStart; i <= rowEnd; i++) {
                for (int j = colStart; j <= colEnd; j++) {
                    battlefield[i][j] = 'O';
                }
            }

            for (Coordinate coordinate : coordinates) {
                battlefieldMap.put(coordinate, ship);
            }
        }

        private boolean isCloseAnother(Coordinate[] coordinates) {
            int minRow = coordinates[0].row;
            int maxRow = coordinates[1].row;

            int minCol = coordinates[0].col;
            int maxCol = coordinates[1].col;

            int rowStart = minRow > 0 ? minRow - 1 : minRow;
            int rowEnd = maxRow < battlefield.length - 1 ? maxRow + 1 : maxRow;

            int colStart = minCol > 0 ? minCol - 1 : minCol;
            int colEnd = maxCol < battlefield[0].length - 1 ? maxCol + 1 : maxCol;

            for (int i = rowStart; i <= rowEnd; i++) {
                for (int j = colStart; j <= colEnd; j++) {
                    if (battlefield[i][j] == 'O') {
                        return true;
                    }
                }
            }
            return false;
        }

        private static boolean checkInput(String input) {
            String regex = "^[A-J](10|[0-9])$";
            boolean regexCheck = input.matches(regex);
            boolean inputCheck = !input.equals("");
            return regexCheck && inputCheck;
        }

        private static boolean checkInput(String... inputs) {
            if (inputs.length > 2) {
                return false;
            } else {
                return checkInput(inputs[0]) && checkInput(inputs[1]);
            }
        }

        private void setCrew() {
            Ship carrier = new Ship("Aircraft Carrier", 5);
            Ship battleship = new Ship("Battleship", 4);
            Ship submarine = new Ship("Submarine", 3);
            Ship cruiser = new Ship("Cruiser", 3);
            Ship destroyer = new Ship("Destroyer", 2);
            crew = new ArrayList<>(List.of(carrier, battleship, submarine, cruiser, destroyer));
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/666/implement#comment
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/125/stages/666/implement">JetBrains
    Academy</a>
  time: Sat, 21 Nov 2020 00:27:55 UTC
record: 4
